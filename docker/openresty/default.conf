# =============================================================================
# OpenResty Configuration for DHI Workshop
# =============================================================================
# This configuration proxies requests to the Node.js application
# Includes security headers and gzip compression
#
# OpenResty runs on port 8080 (non-privileged) by default in DHI
# =============================================================================

server {
    # Listen on 8080 (non-privileged port for DHI non-root user)
    listen 8080;
    server_name localhost;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 512;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml
        application/xml+rss;

    # Proxy all requests to Node.js application
    location / {
        proxy_pass http://app:3000;
        proxy_http_version 1.1;

        # Standard proxy headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # WebSocket support (if needed)
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";

        # Timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }

    # Health check endpoint (direct to OpenResty)
    location /openresty-health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }

    # Logging (symlinked to stdout/stderr in DHI)
    access_log /dev/stdout;
    error_log /dev/stderr warn;
}
